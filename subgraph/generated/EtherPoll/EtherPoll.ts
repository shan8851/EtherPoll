// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class TopicCreated extends ethereum.Event {
  get params(): TopicCreated__Params {
    return new TopicCreated__Params(this);
  }
}

export class TopicCreated__Params {
  _event: TopicCreated;

  constructor(event: TopicCreated) {
    this._event = event;
  }

  get topicId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get metadataCid(): string {
    return this._event.parameters[2].value.toString();
  }

  get endTimestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class VoteCast extends ethereum.Event {
  get params(): VoteCast__Params {
    return new VoteCast__Params(this);
  }
}

export class VoteCast__Params {
  _event: VoteCast;

  constructor(event: VoteCast) {
    this._event = event;
  }

  get topicId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get support(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class EtherPoll__getTopicInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getYesVotes(): BigInt {
    return this.value0;
  }

  getNoVotes(): BigInt {
    return this.value1;
  }

  getEndTimestamp(): BigInt {
    return this.value2;
  }
}

export class EtherPoll__topicsResult {
  value0: Address;
  value1: string;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: string,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getCreator(): Address {
    return this.value0;
  }

  getMetadataCid(): string {
    return this.value1;
  }

  getEndTimestamp(): BigInt {
    return this.value2;
  }

  getYesVotes(): BigInt {
    return this.value3;
  }

  getNoVotes(): BigInt {
    return this.value4;
  }
}

export class EtherPoll extends ethereum.SmartContract {
  static bind(address: Address): EtherPoll {
    return new EtherPoll("EtherPoll", address);
  }

  createTopic(cid: string, duration: BigInt): BigInt {
    let result = super.call(
      "createTopic",
      "createTopic(string,uint256):(uint256)",
      [
        ethereum.Value.fromString(cid),
        ethereum.Value.fromUnsignedBigInt(duration),
      ],
    );

    return result[0].toBigInt();
  }

  try_createTopic(cid: string, duration: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createTopic",
      "createTopic(string,uint256):(uint256)",
      [
        ethereum.Value.fromString(cid),
        ethereum.Value.fromUnsignedBigInt(duration),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTopicInfo(topicId: BigInt): EtherPoll__getTopicInfoResult {
    let result = super.call(
      "getTopicInfo",
      "getTopicInfo(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(topicId)],
    );

    return new EtherPoll__getTopicInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_getTopicInfo(
    topicId: BigInt,
  ): ethereum.CallResult<EtherPoll__getTopicInfoResult> {
    let result = super.tryCall(
      "getTopicInfo",
      "getTopicInfo(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(topicId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EtherPoll__getTopicInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  hasUserVoted(topicId: BigInt, user: Address): boolean {
    let result = super.call(
      "hasUserVoted",
      "hasUserVoted(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(topicId),
        ethereum.Value.fromAddress(user),
      ],
    );

    return result[0].toBoolean();
  }

  try_hasUserVoted(
    topicId: BigInt,
    user: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasUserVoted",
      "hasUserVoted(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(topicId),
        ethereum.Value.fromAddress(user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasVoted(param0: BigInt, param1: Address): boolean {
    let result = super.call("hasVoted", "hasVoted(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromAddress(param1),
    ]);

    return result[0].toBoolean();
  }

  try_hasVoted(param0: BigInt, param1: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasVoted", "hasVoted(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromAddress(param1),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nextTopicId(): BigInt {
    let result = super.call("nextTopicId", "nextTopicId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextTopicId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextTopicId", "nextTopicId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  topics(param0: BigInt): EtherPoll__topicsResult {
    let result = super.call(
      "topics",
      "topics(uint256):(address,string,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new EtherPoll__topicsResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
    );
  }

  try_topics(param0: BigInt): ethereum.CallResult<EtherPoll__topicsResult> {
    let result = super.tryCall(
      "topics",
      "topics(uint256):(address,string,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EtherPoll__topicsResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
      ),
    );
  }
}

export class CreateTopicCall extends ethereum.Call {
  get inputs(): CreateTopicCall__Inputs {
    return new CreateTopicCall__Inputs(this);
  }

  get outputs(): CreateTopicCall__Outputs {
    return new CreateTopicCall__Outputs(this);
  }
}

export class CreateTopicCall__Inputs {
  _call: CreateTopicCall;

  constructor(call: CreateTopicCall) {
    this._call = call;
  }

  get cid(): string {
    return this._call.inputValues[0].value.toString();
  }

  get duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateTopicCall__Outputs {
  _call: CreateTopicCall;

  constructor(call: CreateTopicCall) {
    this._call = call;
  }

  get topicId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class VoteOnTopicCall extends ethereum.Call {
  get inputs(): VoteOnTopicCall__Inputs {
    return new VoteOnTopicCall__Inputs(this);
  }

  get outputs(): VoteOnTopicCall__Outputs {
    return new VoteOnTopicCall__Outputs(this);
  }
}

export class VoteOnTopicCall__Inputs {
  _call: VoteOnTopicCall;

  constructor(call: VoteOnTopicCall) {
    this._call = call;
  }

  get topicId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class VoteOnTopicCall__Outputs {
  _call: VoteOnTopicCall;

  constructor(call: VoteOnTopicCall) {
    this._call = call;
  }
}
